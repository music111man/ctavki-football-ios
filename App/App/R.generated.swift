//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 20 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Color`.
    static let color = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color")
    /// Color `authorize_btn`.
    static let authorize_btn = Rswift.ColorResource(bundle: R.hostingBundle, name: "authorize_btn")
    /// Color `background_light`.
    static let background_light = Rswift.ColorResource(bundle: R.hostingBundle, name: "background_light")
    /// Color `background_main`.
    static let background_main = Rswift.ColorResource(bundle: R.hostingBundle, name: "background_main")
    /// Color `blue_gray_100`.
    static let blue_gray_100 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_100")
    /// Color `blue_gray_200`.
    static let blue_gray_200 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_200")
    /// Color `blue_gray_250`.
    static let blue_gray_250 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_250")
    /// Color `blue_gray_300`.
    static let blue_gray_300 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_300")
    /// Color `blue_gray_400`.
    static let blue_gray_400 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_400")
    /// Color `green_blue_end`.
    static let green_blue_end = Rswift.ColorResource(bundle: R.hostingBundle, name: "green_blue_end")
    /// Color `green_blue_start`.
    static let green_blue_start = Rswift.ColorResource(bundle: R.hostingBundle, name: "green_blue_start")
    /// Color `red_end`.
    static let red_end = Rswift.ColorResource(bundle: R.hostingBundle, name: "red_end")
    /// Color `red_start`.
    static let red_start = Rswift.ColorResource(bundle: R.hostingBundle, name: "red_start")
    /// Color `selected_toolbar_item`.
    static let selected_toolbar_item = Rswift.ColorResource(bundle: R.hostingBundle, name: "selected_toolbar_item")
    /// Color `slide_circle`.
    static let slide_circle = Rswift.ColorResource(bundle: R.hostingBundle, name: "slide_circle")
    /// Color `text`.
    static let text = Rswift.ColorResource(bundle: R.hostingBundle, name: "text")
    /// Color `toolbarItem`.
    static let toolbarItem = Rswift.ColorResource(bundle: R.hostingBundle, name: "toolbarItem")
    /// Color `violet_end`.
    static let violet_end = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet_end")
    /// Color `viotet_start`.
    static let viotet_start = Rswift.ColorResource(bundle: R.hostingBundle, name: "viotet_start")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "authorize_btn", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func authorize_btn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.authorize_btn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background_light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background_main", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background_main(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background_main, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_100", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_100, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_200", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_200, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_250", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_250(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_250, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_300", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_300(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_300, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_400", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_400(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_400, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green_blue_end", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_blue_end(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_blue_end, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green_blue_start", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_blue_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_blue_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red_end", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red_end(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red_end, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red_start", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "selected_toolbar_item", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selected_toolbar_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selected_toolbar_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "slide_circle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func slide_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.slide_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "toolbarItem", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func toolbarItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.toolbarItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet_end", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet_end(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet_end, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "viotet_start", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func viotet_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.viotet_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "authorize_btn", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func authorize_btn(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.authorize_btn.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background_light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background_light(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background_light.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background_main", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background_main(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background_main.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_100", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_100(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_100.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_200", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_200(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_200.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_250", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_250(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_250.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_300", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_300(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_300.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_400", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_400(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_400.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green_blue_end", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_blue_end(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_blue_end.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green_blue_start", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_blue_start(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_blue_start.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red_end", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red_end(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red_end.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red_start", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red_start(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red_start.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "selected_toolbar_item", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func selected_toolbar_item(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.selected_toolbar_item.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "slide_circle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func slide_circle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.slide_circle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "toolbarItem", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func toolbarItem(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.toolbarItem.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet_end", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet_end(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet_end.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "viotet_start", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func viotet_start(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.viotet_start.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `bets`.
    static let bets = Rswift.ImageResource(bundle: R.hostingBundle, name: "bets")
    /// Image `done`.
    static let done = Rswift.ImageResource(bundle: R.hostingBundle, name: "done")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification")
    /// Image `pay`.
    static let pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "pay")
    /// Image `teams`.
    static let teams = Rswift.ImageResource(bundle: R.hostingBundle, name: "teams")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bets", bundle: ..., traitCollection: ...)`
    static func bets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bets, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "done", bundle: ..., traitCollection: ...)`
    static func done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pay", bundle: ..., traitCollection: ...)`
    static func pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "teams", bundle: ..., traitCollection: ...)`
    static func teams(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teams, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 18 localization keys.
    struct localizable {
      /// en translation: Answers to frequently asked questions related to the operation of our service can be found here.
      ///
      /// Locales: en, ru
      static let guid_faq = Rswift.StringResource(key: "guid_faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Here are matches and odds which our service provides predictions on!
      ///
      /// Locales: en, ru
      static let guid_picks = Rswift.StringResource(key: "guid_picks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Here are results of our predictions. More more information, tap on the match' odds circle!
      ///
      /// Locales: en, ru
      static let guid_results = Rswift.StringResource(key: "guid_results", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: If you like our free predictions, you can purchase our paid service!
      ///
      /// Locales: en, ru
      static let guid_paid_plans = Rswift.StringResource(key: "guid_paid_plans", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: LOGIN
      ///
      /// Locales: en, ru
      static let tooltip_login_title = Rswift.StringResource(key: "tooltip_login_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: PREDICTIONS
      ///
      /// Locales: en, ru
      static let tooltip_bets_title = Rswift.StringResource(key: "tooltip_bets_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: PURCHASES
      ///
      /// Locales: en, ru
      static let tooltip_paid_title = Rswift.StringResource(key: "tooltip_paid_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Picks
      ///
      /// Locales: en, ru
      static let picks = Rswift.StringResource(key: "picks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Purchases
      ///
      /// Locales: en, ru
      static let paid_cap = Rswift.StringResource(key: "paid_cap", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: QUESTIONS
      ///
      /// Locales: en, ru
      static let tooltip_faq_title = Rswift.StringResource(key: "tooltip_faq_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Questions
      ///
      /// Locales: en, ru
      static let questions = Rswift.StringResource(key: "questions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: RESULTS
      ///
      /// Locales: en, ru
      static let tooltip_results_title = Rswift.StringResource(key: "tooltip_results_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sign In
      ///
      /// Locales: en, ru
      static let sign_in = Rswift.StringResource(key: "sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: TEAMS
      ///
      /// Locales: en, ru
      static let tooltip_teams_title = Rswift.StringResource(key: "tooltip_teams_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Teams
      ///
      /// Locales: en, ru
      static let teams_cap = Rswift.StringResource(key: "teams_cap", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: To see free predictions you got to sign in with your Apple or Telegram account!
      ///
      /// Locales: en, ru
      static let guid_login = Rswift.StringResource(key: "guid_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: You can find here history of our past predictions sorted by teams.
      ///
      /// Locales: en, ru
      static let guid_teams = Rswift.StringResource(key: "guid_teams", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: my bal.
      ///
      /// Locales: en, ru
      static let my_balance = Rswift.StringResource(key: "my_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: Answers to frequently asked questions related to the operation of our service can be found here.
      ///
      /// Locales: en, ru
      static func guid_faq(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_faq", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_faq"
        }

        return NSLocalizedString("guid_faq", bundle: bundle, comment: "")
      }

      /// en translation: Here are matches and odds which our service provides predictions on!
      ///
      /// Locales: en, ru
      static func guid_picks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_picks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_picks"
        }

        return NSLocalizedString("guid_picks", bundle: bundle, comment: "")
      }

      /// en translation: Here are results of our predictions. More more information, tap on the match' odds circle!
      ///
      /// Locales: en, ru
      static func guid_results(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_results", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_results"
        }

        return NSLocalizedString("guid_results", bundle: bundle, comment: "")
      }

      /// en translation: If you like our free predictions, you can purchase our paid service!
      ///
      /// Locales: en, ru
      static func guid_paid_plans(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_paid_plans", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_paid_plans"
        }

        return NSLocalizedString("guid_paid_plans", bundle: bundle, comment: "")
      }

      /// en translation: LOGIN
      ///
      /// Locales: en, ru
      static func tooltip_login_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_login_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_login_title"
        }

        return NSLocalizedString("tooltip_login_title", bundle: bundle, comment: "")
      }

      /// en translation: PREDICTIONS
      ///
      /// Locales: en, ru
      static func tooltip_bets_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_bets_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_bets_title"
        }

        return NSLocalizedString("tooltip_bets_title", bundle: bundle, comment: "")
      }

      /// en translation: PURCHASES
      ///
      /// Locales: en, ru
      static func tooltip_paid_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_paid_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_paid_title"
        }

        return NSLocalizedString("tooltip_paid_title", bundle: bundle, comment: "")
      }

      /// en translation: Picks
      ///
      /// Locales: en, ru
      static func picks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("picks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "picks"
        }

        return NSLocalizedString("picks", bundle: bundle, comment: "")
      }

      /// en translation: Purchases
      ///
      /// Locales: en, ru
      static func paid_cap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paid_cap", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paid_cap"
        }

        return NSLocalizedString("paid_cap", bundle: bundle, comment: "")
      }

      /// en translation: QUESTIONS
      ///
      /// Locales: en, ru
      static func tooltip_faq_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_faq_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_faq_title"
        }

        return NSLocalizedString("tooltip_faq_title", bundle: bundle, comment: "")
      }

      /// en translation: Questions
      ///
      /// Locales: en, ru
      static func questions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("questions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "questions"
        }

        return NSLocalizedString("questions", bundle: bundle, comment: "")
      }

      /// en translation: RESULTS
      ///
      /// Locales: en, ru
      static func tooltip_results_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_results_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_results_title"
        }

        return NSLocalizedString("tooltip_results_title", bundle: bundle, comment: "")
      }

      /// en translation: Sign In
      ///
      /// Locales: en, ru
      static func sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in"
        }

        return NSLocalizedString("sign_in", bundle: bundle, comment: "")
      }

      /// en translation: TEAMS
      ///
      /// Locales: en, ru
      static func tooltip_teams_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_teams_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_teams_title"
        }

        return NSLocalizedString("tooltip_teams_title", bundle: bundle, comment: "")
      }

      /// en translation: Teams
      ///
      /// Locales: en, ru
      static func teams_cap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("teams_cap", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "teams_cap"
        }

        return NSLocalizedString("teams_cap", bundle: bundle, comment: "")
      }

      /// en translation: To see free predictions you got to sign in with your Apple or Telegram account!
      ///
      /// Locales: en, ru
      static func guid_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_login"
        }

        return NSLocalizedString("guid_login", bundle: bundle, comment: "")
      }

      /// en translation: You can find here history of our past predictions sorted by teams.
      ///
      /// Locales: en, ru
      static func guid_teams(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_teams", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_teams"
        }

        return NSLocalizedString("guid_teams", bundle: bundle, comment: "")
      }

      /// en translation: my bal.
      ///
      /// Locales: en, ru
      static func my_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "my_balance"
        }

        return NSLocalizedString("my_balance", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
