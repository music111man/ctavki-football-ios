//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `BetDetailsVController`.
    static let betDetailsVController = _R.storyboard.betDetailsVController()
    /// Storyboard `HistoryVController`.
    static let historyVController = _R.storyboard.historyVController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `SignInVController`.
    static let signInVController = _R.storyboard.signInVController()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BetDetailsVController", bundle: ...)`
    static func betDetailsVController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.betDetailsVController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HistoryVController", bundle: ...)`
    static func historyVController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.historyVController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignInVController", bundle: ...)`
    static func signInVController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signInVController)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 35 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `background_light_theme`.
    static let background_light_theme = Rswift.ColorResource(bundle: R.hostingBundle, name: "background_light_theme")
    /// Color `background_light`.
    static let background_light = Rswift.ColorResource(bundle: R.hostingBundle, name: "background_light")
    /// Color `background_main_light`.
    static let background_main_light = Rswift.ColorResource(bundle: R.hostingBundle, name: "background_main_light")
    /// Color `background_main`.
    static let background_main = Rswift.ColorResource(bundle: R.hostingBundle, name: "background_main")
    /// Color `background_white`.
    static let background_white = Rswift.ColorResource(bundle: R.hostingBundle, name: "background_white")
    /// Color `bet_group_end`.
    static let bet_group_end = Rswift.ColorResource(bundle: R.hostingBundle, name: "bet_group_end")
    /// Color `bet_group_header`.
    static let bet_group_header = Rswift.ColorResource(bundle: R.hostingBundle, name: "bet_group_header")
    /// Color `bet_group_start`.
    static let bet_group_start = Rswift.ColorResource(bundle: R.hostingBundle, name: "bet_group_start")
    /// Color `blue_gray_100`.
    static let blue_gray_100 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_100")
    /// Color `blue_gray_200`.
    static let blue_gray_200 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_200")
    /// Color `blue_gray_250`.
    static let blue_gray_250 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_250")
    /// Color `blue_gray_300`.
    static let blue_gray_300 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_300")
    /// Color `blue_gray_400`.
    static let blue_gray_400 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_400")
    /// Color `blue_gray_500`.
    static let blue_gray_500 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue_gray_500")
    /// Color `event_date`.
    static let event_date = Rswift.ColorResource(bundle: R.hostingBundle, name: "event_date")
    /// Color `gray_656565`.
    static let gray_656565 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray_656565")
    /// Color `green_blue_end`.
    static let green_blue_end = Rswift.ColorResource(bundle: R.hostingBundle, name: "green_blue_end")
    /// Color `green_blue_start`.
    static let green_blue_start = Rswift.ColorResource(bundle: R.hostingBundle, name: "green_blue_start")
    /// Color `lost`.
    static let lost = Rswift.ColorResource(bundle: R.hostingBundle, name: "lost")
    /// Color `red_end`.
    static let red_end = Rswift.ColorResource(bundle: R.hostingBundle, name: "red_end")
    /// Color `red_start`.
    static let red_start = Rswift.ColorResource(bundle: R.hostingBundle, name: "red_start")
    /// Color `return`.
    static let `return` = Rswift.ColorResource(bundle: R.hostingBundle, name: "return")
    /// Color `selected_blue`.
    static let selected_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "selected_blue")
    /// Color `selected_toolbar_item`.
    static let selected_toolbar_item = Rswift.ColorResource(bundle: R.hostingBundle, name: "selected_toolbar_item")
    /// Color `shadow`.
    static let shadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadow")
    /// Color `slide_circle`.
    static let slide_circle = Rswift.ColorResource(bundle: R.hostingBundle, name: "slide_circle")
    /// Color `text_black`.
    static let text_black = Rswift.ColorResource(bundle: R.hostingBundle, name: "text_black")
    /// Color `text_theme`.
    static let text_theme = Rswift.ColorResource(bundle: R.hostingBundle, name: "text_theme")
    /// Color `title_color`.
    static let title_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "title_color")
    /// Color `toolbarItem`.
    static let toolbarItem = Rswift.ColorResource(bundle: R.hostingBundle, name: "toolbarItem")
    /// Color `violet_end`.
    static let violet_end = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet_end")
    /// Color `viotet_start`.
    static let viotet_start = Rswift.ColorResource(bundle: R.hostingBundle, name: "viotet_start")
    /// Color `won_light`.
    static let won_light = Rswift.ColorResource(bundle: R.hostingBundle, name: "won_light")
    /// Color `won`.
    static let won = Rswift.ColorResource(bundle: R.hostingBundle, name: "won")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background_light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background_light_theme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background_light_theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background_light_theme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background_main", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background_main(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background_main, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background_main_light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background_main_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background_main_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background_white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "bet_group_end", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bet_group_end(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bet_group_end, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "bet_group_header", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bet_group_header(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bet_group_header, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "bet_group_start", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bet_group_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bet_group_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_100", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_100, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_200", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_200, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_250", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_250(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_250, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_300", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_300(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_300, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_400", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_400(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_400, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue_gray_500", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_gray_500(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_gray_500, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "event_date", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func event_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.event_date, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray_656565", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray_656565(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray_656565, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green_blue_end", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_blue_end(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_blue_end, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green_blue_start", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_blue_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_blue_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lost", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red_end", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red_end(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red_end, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red_start", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "return", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func `return`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.`return`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "selected_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selected_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selected_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "selected_toolbar_item", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func selected_toolbar_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.selected_toolbar_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "slide_circle", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func slide_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.slide_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text_black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text_theme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text_theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text_theme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "title_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func title_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.title_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "toolbarItem", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func toolbarItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.toolbarItem, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet_end", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet_end(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet_end, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "viotet_start", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func viotet_start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.viotet_start, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "won", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func won(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.won, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "won_light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func won_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.won_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background_light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background_light(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background_light.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background_light_theme", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background_light_theme(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background_light_theme.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background_main", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background_main(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background_main.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background_main_light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background_main_light(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background_main_light.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background_white", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background_white(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background_white.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "bet_group_end", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func bet_group_end(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.bet_group_end.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "bet_group_header", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func bet_group_header(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.bet_group_header.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "bet_group_start", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func bet_group_start(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.bet_group_start.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_100", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_100(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_100.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_200", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_200(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_200.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_250", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_250(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_250.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_300", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_300(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_300.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_400", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_400(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_400.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue_gray_500", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue_gray_500(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue_gray_500.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "event_date", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func event_date(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.event_date.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray_656565", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray_656565(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray_656565.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green_blue_end", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_blue_end(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_blue_end.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green_blue_start", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_blue_start(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_blue_start.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lost", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lost(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lost.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red_end", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red_end(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red_end.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red_start", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red_start(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red_start.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "return", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func `return`(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.`return`.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "selected_blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func selected_blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.selected_blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "selected_toolbar_item", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func selected_toolbar_item(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.selected_toolbar_item.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shadow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "slide_circle", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func slide_circle(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.slide_circle.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text_black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text_black(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text_black.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text_theme", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text_theme(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text_theme.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "title_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func title_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.title_color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "toolbarItem", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func toolbarItem(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.toolbarItem.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet_end", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet_end(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet_end.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "viotet_start", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func viotet_start(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.viotet_start.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "won", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func won(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.won.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "won_light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func won_light(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.won_light.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 21 images.
  struct image {
    /// Image `account_circle`.
    static let account_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "account_circle")
    /// Image `arrow_back`.
    static let arrow_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_back")
    /// Image `arrow_bottom`.
    static let arrow_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_bottom")
    /// Image `arrow_left`.
    static let arrow_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_left")
    /// Image `arrow_next`.
    static let arrow_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_next")
    /// Image `arrow_top`.
    static let arrow_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_top")
    /// Image `arrow_up`.
    static let arrow_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_up")
    /// Image `ball_blue`.
    static let ball_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ball_blue")
    /// Image `bets`.
    static let bets = Rswift.ImageResource(bundle: R.hostingBundle, name: "bets")
    /// Image `done`.
    static let done = Rswift.ImageResource(bundle: R.hostingBundle, name: "done")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `left_arrow`.
    static let left_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "left_arrow")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `notification`.
    static let notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification")
    /// Image `pay`.
    static let pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "pay")
    /// Image `teams`.
    static let teams = Rswift.ImageResource(bundle: R.hostingBundle, name: "teams")
    /// Image `telegram`.
    static let telegram = Rswift.ImageResource(bundle: R.hostingBundle, name: "telegram")
    /// Image `up_arrow`.
    static let up_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "up_arrow")
    /// Image `up_small_arrow`.
    static let up_small_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "up_small_arrow")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account_circle", bundle: ..., traitCollection: ...)`
    static func account_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_back", bundle: ..., traitCollection: ...)`
    static func arrow_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_bottom", bundle: ..., traitCollection: ...)`
    static func arrow_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_left", bundle: ..., traitCollection: ...)`
    static func arrow_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_next", bundle: ..., traitCollection: ...)`
    static func arrow_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_top", bundle: ..., traitCollection: ...)`
    static func arrow_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_up", bundle: ..., traitCollection: ...)`
    static func arrow_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_up, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ball_blue", bundle: ..., traitCollection: ...)`
    static func ball_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ball_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bets", bundle: ..., traitCollection: ...)`
    static func bets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bets, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "done", bundle: ..., traitCollection: ...)`
    static func done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left_arrow", bundle: ..., traitCollection: ...)`
    static func left_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notification", bundle: ..., traitCollection: ...)`
    static func notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pay", bundle: ..., traitCollection: ...)`
    static func pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "teams", bundle: ..., traitCollection: ...)`
    static func teams(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teams, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "telegram", bundle: ..., traitCollection: ...)`
    static func telegram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.telegram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "up_arrow", bundle: ..., traitCollection: ...)`
    static func up_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.up_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "up_small_arrow", bundle: ..., traitCollection: ...)`
    static func up_small_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.up_small_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `BetResultHeaderView`.
    static let betResultHeaderView = _R.nib._BetResultHeaderView()
    /// Nib `BetSectionHeaderView`.
    static let betSectionHeaderView = _R.nib._BetSectionHeaderView()
    /// Nib `BetsCellView`.
    static let betsCellView = _R.nib._BetsCellView()
    /// Nib `BetsCell`.
    static let betsCell = _R.nib._BetsCell()
    /// Nib `FaqView`.
    static let faqView = _R.nib._FaqView()
    /// Nib `NoActiveBetsCell`.
    static let noActiveBetsCell = _R.nib._NoActiveBetsCell()
    /// Nib `TeamView`.
    static let teamView = _R.nib._TeamView()
    /// Nib `TeamsRowView`.
    static let teamsRowView = _R.nib._TeamsRowView()
    /// Nib `TeamsViewCell`.
    static let teamsViewCell = _R.nib._TeamsViewCell()
    /// Nib `TeamsView`.
    static let teamsView = _R.nib._TeamsView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BetResultHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.betResultHeaderView) instead")
    static func betResultHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.betResultHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BetSectionHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.betSectionHeaderView) instead")
    static func betSectionHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.betSectionHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BetsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.betsCell) instead")
    static func betsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.betsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BetsCellView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.betsCellView) instead")
    static func betsCellView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.betsCellView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FaqView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.faqView) instead")
    static func faqView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.faqView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NoActiveBetsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.noActiveBetsCell) instead")
    static func noActiveBetsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noActiveBetsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeamView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teamView) instead")
    static func teamView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teamView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeamsRowView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teamsRowView) instead")
    static func teamsRowView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teamsRowView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeamsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teamsView) instead")
    static func teamsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teamsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TeamsViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.teamsViewCell) instead")
    static func teamsViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teamsViewCell)
    }
    #endif

    static func betResultHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BetResultHeaderView? {
      return R.nib.betResultHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BetResultHeaderView
    }

    static func betSectionHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BetSectionHeaderView? {
      return R.nib.betSectionHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BetSectionHeaderView
    }

    static func betsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BetsCell? {
      return R.nib.betsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BetsCell
    }

    static func betsCellView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BetsCellView? {
      return R.nib.betsCellView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BetsCellView
    }

    static func faqView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqView? {
      return R.nib.faqView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqView
    }

    static func noActiveBetsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoActiveBetsCell? {
      return R.nib.noActiveBetsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoActiveBetsCell
    }

    static func teamView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeamView? {
      return R.nib.teamView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamView
    }

    static func teamsRowView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeamsRowView? {
      return R.nib.teamsRowView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamsRowView
    }

    static func teamsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeamsView? {
      return R.nib.teamsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamsView
    }

    static func teamsViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeamsViewCell? {
      return R.nib.teamsViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamsViewCell
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 61 localization keys.
    struct localizable {
      /// en translation: %#@VARIABLE@
      ///
      /// Locales: en, ru, uk
      static let hours = Rswift.StringResource(key: "hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: %#@VARIABLE@
      ///
      /// Locales: en, ru, uk
      static let minutes = Rswift.StringResource(key: "minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: %@
      ///
      /// Locales: en, ru, uk
      static let year_at_end = Rswift.StringResource(key: "year_at_end", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Answers to frequently asked questions related to the operation of our service can be found here.
      ///
      /// Locales: en, ru, uk
      static let guid_faq = Rswift.StringResource(key: "guid_faq", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: BALANCE FOR %@:
      ///
      /// Locales: en, ru, uk
      static let balance_for_month = Rswift.StringResource(key: "balance_for_month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: BALANCE FOR %@: %d$
      ///
      /// Locales: en, ru, uk
      static let balance_for_month_amount = Rswift.StringResource(key: "balance_for_month_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Balance
      ///
      /// Locales: en, ru, uk
      static let balance = Rswift.StringResource(key: "balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Bet amount: 100$
      ///
      /// Locales: en, ru, uk
      static let bet_amount_100 = Rswift.StringResource(key: "bet_amount_100", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Bets history of
      ///
      /// Locales: en, ru, uk
      static let bets_history = Rswift.StringResource(key: "bets_history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, ru, uk
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Go to predictions
      ///
      /// Locales: en, ru, uk
      static let get_more_bets = Rswift.StringResource(key: "get_more_bets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Here are matches and odds which our service provides predictions on. Click on the match you are interested in and find out the details.
      ///
      /// Locales: en, ru, uk
      static let guid_picks = Rswift.StringResource(key: "guid_picks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: If you have won at the bookmaker's office using our free predictions, then please support our project in this section!
      ///
      /// Locales: en, ru, uk
      static let guid_paid_plans = Rswift.StringResource(key: "guid_paid_plans", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: In this section, the results of our predictions are calculated assuming we placed a $100 bet on each match. A green circle indicates the amount won, a red circle indicates the amount lost, and a grey circle represents the return of the bet.
      ///
      /// Locales: en, ru, uk
      static let guid_results = Rswift.StringResource(key: "guid_results", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: LOGIN
      ///
      /// Locales: en, ru, uk
      static let screen_login_title = Rswift.StringResource(key: "screen_login_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: LOGIN (2/6)
      ///
      /// Locales: en, ru, uk
      static let tooltip_login_title = Rswift.StringResource(key: "tooltip_login_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Lost 100
      ///
      /// Locales: en, ru, uk
      static let loss = Rswift.StringResource(key: "loss", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Match begins in %@
      ///
      /// Locales: en, ru, uk
      static let match_begins_in = Rswift.StringResource(key: "match_begins_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Match begins on %@ at %@
      ///
      /// Locales: en, ru, uk
      static let match_begins = Rswift.StringResource(key: "match_begins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Match begins today at %@
      ///
      /// Locales: en, ru, uk
      static let match_begins_today = Rswift.StringResource(key: "match_begins_today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Match begins tomorrow at %@
      ///
      /// Locales: en, ru, uk
      static let match_begins_tomorrow = Rswift.StringResource(key: "match_begins_tomorrow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Match is underway. It's the %d minute of the match
      ///
      /// Locales: en, ru, uk
      static let match_being_played_n_minute = Rswift.StringResource(key: "match_being_played_n_minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: No active bets
      ///
      /// Locales: en, ru, uk
      static let no_active_bets = Rswift.StringResource(key: "no_active_bets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Not signed in
      ///
      /// Locales: en, ru, uk
      static let you_are_not_logged_in = Rswift.StringResource(key: "you_are_not_logged_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Odds:
      ///
      /// Locales: en, ru, uk
      static let odds_col = Rswift.StringResource(key: "odds_col", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: PREDICTIONS
      ///
      /// Locales: en, ru, uk
      static let screen_bets_title = Rswift.StringResource(key: "screen_bets_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: PREDICTIONS (1/6)
      ///
      /// Locales: en, ru, uk
      static let tooltip_bets_title = Rswift.StringResource(key: "tooltip_bets_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: PURCHASES (5/6)
      ///
      /// Locales: en, ru, uk
      static let tooltip_paid_title = Rswift.StringResource(key: "tooltip_paid_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Picks
      ///
      /// Locales: en, ru, uk
      static let bets_made = Rswift.StringResource(key: "bets_made", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Picks
      ///
      /// Locales: en, ru, uk
      static let picks = Rswift.StringResource(key: "picks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Prediction:
      ///
      /// Locales: en, ru, uk
      static let prediction = Rswift.StringResource(key: "prediction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Problems with Internet connection
      ///
      /// Locales: en, ru, uk
      static let net_error = Rswift.StringResource(key: "net_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: QUESTIONS (6/6)
      ///
      /// Locales: en, ru, uk
      static let tooltip_faq_title = Rswift.StringResource(key: "tooltip_faq_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: QUESTIONS AND ANSWERS
      ///
      /// Locales: en, ru, uk
      static let screen_faq_title = Rswift.StringResource(key: "screen_faq_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Questions
      ///
      /// Locales: en, ru, uk
      static let questions = Rswift.StringResource(key: "questions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: RESULTS (3/6)
      ///
      /// Locales: en, ru, uk
      static let tooltip_results_title = Rswift.StringResource(key: "tooltip_results_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Result:
      ///
      /// Locales: en, ru, uk
      static let result = Rswift.StringResource(key: "result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: SKIP
      ///
      /// Locales: en, ru, uk
      static let skip = Rswift.StringResource(key: "skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: SUPPORT US
      ///
      /// Locales: en, ru, uk
      static let screen_paid_title = Rswift.StringResource(key: "screen_paid_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Sign In
      ///
      /// Locales: en, ru, uk
      static let sign_in = Rswift.StringResource(key: "sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Sign in with Apple
      ///
      /// Locales: en, ru, uk
      static let log_in_with_apple = Rswift.StringResource(key: "log_in_with_apple", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Sign in with Google
      ///
      /// Locales: en, ru, uk
      static let log_in_with_google = Rswift.StringResource(key: "log_in_with_google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Sign in with Telegram
      ///
      /// Locales: en, ru, uk
      static let log_in_with_telegram = Rswift.StringResource(key: "log_in_with_telegram", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Soon we will provide new picks. Remain in touch...
      ///
      /// Locales: en, ru, uk
      static let soon_we_provide_bets = Rswift.StringResource(key: "soon_we_provide_bets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Support us
      ///
      /// Locales: en, ru, uk
      static let paid_cap = Rswift.StringResource(key: "paid_cap", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: TEAMS
      ///
      /// Locales: en, ru, uk
      static let screen_teams_title = Rswift.StringResource(key: "screen_teams_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: TEAMS (4/6)
      ///
      /// Locales: en, ru, uk
      static let tooltip_teams_title = Rswift.StringResource(key: "tooltip_teams_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Teams
      ///
      /// Locales: en, ru, uk
      static let teams_cap = Rswift.StringResource(key: "teams_cap", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: The application cannot process data received from the server. Contact support.
      ///
      /// Locales: en, ru, uk
      static let server_data_error = Rswift.StringResource(key: "server_data_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: The match is already underway, the first half has been played
      ///
      /// Locales: en, ru, uk
      static let match_being_played_break = Rswift.StringResource(key: "match_being_played_break", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: To see free predictions you got to sign in with your Apple or Telegram account!
      ///
      /// Locales: en, ru, uk
      static let guid_login = Rswift.StringResource(key: "guid_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Updating...
      ///
      /// Locales: en, ru, uk
      static let update_data_msg = Rswift.StringResource(key: "update_data_msg", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: Win %d
      ///
      /// Locales: en, ru, uk
      static let winnings = Rswift.StringResource(key: "winnings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: You can find here history of our past predictions sorted by teams.
      ///
      /// Locales: en, ru, uk
      static let guid_teams = Rswift.StringResource(key: "guid_teams", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: You gotta sign in to see some picks
      ///
      /// Locales: en, ru, uk
      static let we_gift_free_bets_to_new_users = Rswift.StringResource(key: "we_gift_free_bets_to_new_users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: You have successfully logged in. Now all our free sports predictions are available to you.
      ///
      /// Locales: en, ru, uk
      static let you_are_logged = Rswift.StringResource(key: "you_are_logged", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: my bal.
      ///
      /// Locales: en, ru, uk
      static let my_balance = Rswift.StringResource(key: "my_balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: win
      ///
      /// Locales: en, ru, uk
      static let `return` = Rswift.StringResource(key: "return", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: with current picks
      ///
      /// Locales: en, ru, uk
      static let with_current_picks = Rswift.StringResource(key: "with_current_picks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: with history of %d picks and more
      ///
      /// Locales: en, ru, uk
      static let with_bets_history_n_and_more = Rswift.StringResource(key: "with_bets_history_n_and_more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)
      /// en translation: with history of 4 picks and less
      ///
      /// Locales: en, ru, uk
      static let with_bets_history_4_and_less = Rswift.StringResource(key: "with_bets_history_4_and_less", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru", "uk"], comment: nil)

      /// en translation: %#@VARIABLE@
      ///
      /// Locales: en, ru, uk
      static func hours(variablE value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("hours", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hours"
        }

        let format = NSLocalizedString("hours", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %#@VARIABLE@
      ///
      /// Locales: en, ru, uk
      static func minutes(variablE value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("minutes", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "minutes"
        }

        let format = NSLocalizedString("minutes", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@
      ///
      /// Locales: en, ru, uk
      static func year_at_end(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("year_at_end", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "year_at_end"
        }

        let format = NSLocalizedString("year_at_end", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Answers to frequently asked questions related to the operation of our service can be found here.
      ///
      /// Locales: en, ru, uk
      static func guid_faq(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_faq", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_faq"
        }

        return NSLocalizedString("guid_faq", bundle: bundle, comment: "")
      }

      /// en translation: BALANCE FOR %@:
      ///
      /// Locales: en, ru, uk
      static func balance_for_month(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("balance_for_month", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "balance_for_month"
        }

        let format = NSLocalizedString("balance_for_month", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: BALANCE FOR %@: %d$
      ///
      /// Locales: en, ru, uk
      static func balance_for_month_amount(_ value1: String, _ value2: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("balance_for_month_amount", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "balance_for_month_amount"
        }

        let format = NSLocalizedString("balance_for_month_amount", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Balance
      ///
      /// Locales: en, ru, uk
      static func balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "balance"
        }

        return NSLocalizedString("balance", bundle: bundle, comment: "")
      }

      /// en translation: Bet amount: 100$
      ///
      /// Locales: en, ru, uk
      static func bet_amount_100(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bet_amount_100", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bet_amount_100"
        }

        return NSLocalizedString("bet_amount_100", bundle: bundle, comment: "")
      }

      /// en translation: Bets history of
      ///
      /// Locales: en, ru, uk
      static func bets_history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bets_history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bets_history"
        }

        return NSLocalizedString("bets_history", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, ru, uk
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", bundle: bundle, comment: "")
      }

      /// en translation: Go to predictions
      ///
      /// Locales: en, ru, uk
      static func get_more_bets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("get_more_bets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "get_more_bets"
        }

        return NSLocalizedString("get_more_bets", bundle: bundle, comment: "")
      }

      /// en translation: Here are matches and odds which our service provides predictions on. Click on the match you are interested in and find out the details.
      ///
      /// Locales: en, ru, uk
      static func guid_picks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_picks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_picks"
        }

        return NSLocalizedString("guid_picks", bundle: bundle, comment: "")
      }

      /// en translation: If you have won at the bookmaker's office using our free predictions, then please support our project in this section!
      ///
      /// Locales: en, ru, uk
      static func guid_paid_plans(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_paid_plans", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_paid_plans"
        }

        return NSLocalizedString("guid_paid_plans", bundle: bundle, comment: "")
      }

      /// en translation: In this section, the results of our predictions are calculated assuming we placed a $100 bet on each match. A green circle indicates the amount won, a red circle indicates the amount lost, and a grey circle represents the return of the bet.
      ///
      /// Locales: en, ru, uk
      static func guid_results(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_results", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_results"
        }

        return NSLocalizedString("guid_results", bundle: bundle, comment: "")
      }

      /// en translation: LOGIN
      ///
      /// Locales: en, ru, uk
      static func screen_login_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_login_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_login_title"
        }

        return NSLocalizedString("screen_login_title", bundle: bundle, comment: "")
      }

      /// en translation: LOGIN (2/6)
      ///
      /// Locales: en, ru, uk
      static func tooltip_login_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_login_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_login_title"
        }

        return NSLocalizedString("tooltip_login_title", bundle: bundle, comment: "")
      }

      /// en translation: Lost 100
      ///
      /// Locales: en, ru, uk
      static func loss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loss", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loss"
        }

        return NSLocalizedString("loss", bundle: bundle, comment: "")
      }

      /// en translation: Match begins in %@
      ///
      /// Locales: en, ru, uk
      static func match_begins_in(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("match_begins_in", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "match_begins_in"
        }

        let format = NSLocalizedString("match_begins_in", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Match begins on %@ at %@
      ///
      /// Locales: en, ru, uk
      static func match_begins(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("match_begins", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "match_begins"
        }

        let format = NSLocalizedString("match_begins", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Match begins today at %@
      ///
      /// Locales: en, ru, uk
      static func match_begins_today(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("match_begins_today", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "match_begins_today"
        }

        let format = NSLocalizedString("match_begins_today", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Match begins tomorrow at %@
      ///
      /// Locales: en, ru, uk
      static func match_begins_tomorrow(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("match_begins_tomorrow", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "match_begins_tomorrow"
        }

        let format = NSLocalizedString("match_begins_tomorrow", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Match is underway. It's the %d minute of the match
      ///
      /// Locales: en, ru, uk
      static func match_being_played_n_minute(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("match_being_played_n_minute", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "match_being_played_n_minute"
        }

        let format = NSLocalizedString("match_being_played_n_minute", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: No active bets
      ///
      /// Locales: en, ru, uk
      static func no_active_bets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_active_bets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_active_bets"
        }

        return NSLocalizedString("no_active_bets", bundle: bundle, comment: "")
      }

      /// en translation: Not signed in
      ///
      /// Locales: en, ru, uk
      static func you_are_not_logged_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you_are_not_logged_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "you_are_not_logged_in"
        }

        return NSLocalizedString("you_are_not_logged_in", bundle: bundle, comment: "")
      }

      /// en translation: Odds:
      ///
      /// Locales: en, ru, uk
      static func odds_col(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("odds_col", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "odds_col"
        }

        return NSLocalizedString("odds_col", bundle: bundle, comment: "")
      }

      /// en translation: PREDICTIONS
      ///
      /// Locales: en, ru, uk
      static func screen_bets_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_bets_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_bets_title"
        }

        return NSLocalizedString("screen_bets_title", bundle: bundle, comment: "")
      }

      /// en translation: PREDICTIONS (1/6)
      ///
      /// Locales: en, ru, uk
      static func tooltip_bets_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_bets_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_bets_title"
        }

        return NSLocalizedString("tooltip_bets_title", bundle: bundle, comment: "")
      }

      /// en translation: PURCHASES (5/6)
      ///
      /// Locales: en, ru, uk
      static func tooltip_paid_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_paid_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_paid_title"
        }

        return NSLocalizedString("tooltip_paid_title", bundle: bundle, comment: "")
      }

      /// en translation: Picks
      ///
      /// Locales: en, ru, uk
      static func bets_made(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bets_made", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bets_made"
        }

        return NSLocalizedString("bets_made", bundle: bundle, comment: "")
      }

      /// en translation: Picks
      ///
      /// Locales: en, ru, uk
      static func picks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("picks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "picks"
        }

        return NSLocalizedString("picks", bundle: bundle, comment: "")
      }

      /// en translation: Prediction:
      ///
      /// Locales: en, ru, uk
      static func prediction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("prediction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "prediction"
        }

        return NSLocalizedString("prediction", bundle: bundle, comment: "")
      }

      /// en translation: Problems with Internet connection
      ///
      /// Locales: en, ru, uk
      static func net_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("net_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "net_error"
        }

        return NSLocalizedString("net_error", bundle: bundle, comment: "")
      }

      /// en translation: QUESTIONS (6/6)
      ///
      /// Locales: en, ru, uk
      static func tooltip_faq_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_faq_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_faq_title"
        }

        return NSLocalizedString("tooltip_faq_title", bundle: bundle, comment: "")
      }

      /// en translation: QUESTIONS AND ANSWERS
      ///
      /// Locales: en, ru, uk
      static func screen_faq_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_faq_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_faq_title"
        }

        return NSLocalizedString("screen_faq_title", bundle: bundle, comment: "")
      }

      /// en translation: Questions
      ///
      /// Locales: en, ru, uk
      static func questions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("questions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "questions"
        }

        return NSLocalizedString("questions", bundle: bundle, comment: "")
      }

      /// en translation: RESULTS (3/6)
      ///
      /// Locales: en, ru, uk
      static func tooltip_results_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_results_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_results_title"
        }

        return NSLocalizedString("tooltip_results_title", bundle: bundle, comment: "")
      }

      /// en translation: Result:
      ///
      /// Locales: en, ru, uk
      static func result(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("result", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "result"
        }

        return NSLocalizedString("result", bundle: bundle, comment: "")
      }

      /// en translation: SKIP
      ///
      /// Locales: en, ru, uk
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "skip"
        }

        return NSLocalizedString("skip", bundle: bundle, comment: "")
      }

      /// en translation: SUPPORT US
      ///
      /// Locales: en, ru, uk
      static func screen_paid_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_paid_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_paid_title"
        }

        return NSLocalizedString("screen_paid_title", bundle: bundle, comment: "")
      }

      /// en translation: Sign In
      ///
      /// Locales: en, ru, uk
      static func sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in"
        }

        return NSLocalizedString("sign_in", bundle: bundle, comment: "")
      }

      /// en translation: Sign in with Apple
      ///
      /// Locales: en, ru, uk
      static func log_in_with_apple(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("log_in_with_apple", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "log_in_with_apple"
        }

        return NSLocalizedString("log_in_with_apple", bundle: bundle, comment: "")
      }

      /// en translation: Sign in with Google
      ///
      /// Locales: en, ru, uk
      static func log_in_with_google(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("log_in_with_google", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "log_in_with_google"
        }

        return NSLocalizedString("log_in_with_google", bundle: bundle, comment: "")
      }

      /// en translation: Sign in with Telegram
      ///
      /// Locales: en, ru, uk
      static func log_in_with_telegram(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("log_in_with_telegram", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "log_in_with_telegram"
        }

        return NSLocalizedString("log_in_with_telegram", bundle: bundle, comment: "")
      }

      /// en translation: Soon we will provide new picks. Remain in touch...
      ///
      /// Locales: en, ru, uk
      static func soon_we_provide_bets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("soon_we_provide_bets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "soon_we_provide_bets"
        }

        return NSLocalizedString("soon_we_provide_bets", bundle: bundle, comment: "")
      }

      /// en translation: Support us
      ///
      /// Locales: en, ru, uk
      static func paid_cap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paid_cap", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paid_cap"
        }

        return NSLocalizedString("paid_cap", bundle: bundle, comment: "")
      }

      /// en translation: TEAMS
      ///
      /// Locales: en, ru, uk
      static func screen_teams_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("screen_teams_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "screen_teams_title"
        }

        return NSLocalizedString("screen_teams_title", bundle: bundle, comment: "")
      }

      /// en translation: TEAMS (4/6)
      ///
      /// Locales: en, ru, uk
      static func tooltip_teams_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tooltip_teams_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tooltip_teams_title"
        }

        return NSLocalizedString("tooltip_teams_title", bundle: bundle, comment: "")
      }

      /// en translation: Teams
      ///
      /// Locales: en, ru, uk
      static func teams_cap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("teams_cap", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "teams_cap"
        }

        return NSLocalizedString("teams_cap", bundle: bundle, comment: "")
      }

      /// en translation: The application cannot process data received from the server. Contact support.
      ///
      /// Locales: en, ru, uk
      static func server_data_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("server_data_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "server_data_error"
        }

        return NSLocalizedString("server_data_error", bundle: bundle, comment: "")
      }

      /// en translation: The match is already underway, the first half has been played
      ///
      /// Locales: en, ru, uk
      static func match_being_played_break(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("match_being_played_break", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "match_being_played_break"
        }

        return NSLocalizedString("match_being_played_break", bundle: bundle, comment: "")
      }

      /// en translation: To see free predictions you got to sign in with your Apple or Telegram account!
      ///
      /// Locales: en, ru, uk
      static func guid_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_login"
        }

        return NSLocalizedString("guid_login", bundle: bundle, comment: "")
      }

      /// en translation: Updating...
      ///
      /// Locales: en, ru, uk
      static func update_data_msg(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update_data_msg", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update_data_msg"
        }

        return NSLocalizedString("update_data_msg", bundle: bundle, comment: "")
      }

      /// en translation: Win %d
      ///
      /// Locales: en, ru, uk
      static func winnings(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("winnings", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "winnings"
        }

        let format = NSLocalizedString("winnings", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: You can find here history of our past predictions sorted by teams.
      ///
      /// Locales: en, ru, uk
      static func guid_teams(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("guid_teams", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "guid_teams"
        }

        return NSLocalizedString("guid_teams", bundle: bundle, comment: "")
      }

      /// en translation: You gotta sign in to see some picks
      ///
      /// Locales: en, ru, uk
      static func we_gift_free_bets_to_new_users(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("we_gift_free_bets_to_new_users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "we_gift_free_bets_to_new_users"
        }

        return NSLocalizedString("we_gift_free_bets_to_new_users", bundle: bundle, comment: "")
      }

      /// en translation: You have successfully logged in. Now all our free sports predictions are available to you.
      ///
      /// Locales: en, ru, uk
      static func you_are_logged(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you_are_logged", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "you_are_logged"
        }

        return NSLocalizedString("you_are_logged", bundle: bundle, comment: "")
      }

      /// en translation: my bal.
      ///
      /// Locales: en, ru, uk
      static func my_balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "my_balance"
        }

        return NSLocalizedString("my_balance", bundle: bundle, comment: "")
      }

      /// en translation: win
      ///
      /// Locales: en, ru, uk
      static func `return`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("return", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "return"
        }

        return NSLocalizedString("return", bundle: bundle, comment: "")
      }

      /// en translation: with current picks
      ///
      /// Locales: en, ru, uk
      static func with_current_picks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("with_current_picks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "with_current_picks"
        }

        return NSLocalizedString("with_current_picks", bundle: bundle, comment: "")
      }

      /// en translation: with history of %d picks and more
      ///
      /// Locales: en, ru, uk
      static func with_bets_history_n_and_more(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("with_bets_history_n_and_more", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "with_bets_history_n_and_more"
        }

        let format = NSLocalizedString("with_bets_history_n_and_more", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: with history of 4 picks and less
      ///
      /// Locales: en, ru, uk
      static func with_bets_history_4_and_less(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("with_bets_history_4_and_less", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "with_bets_history_4_and_less"
        }

        return NSLocalizedString("with_bets_history_4_and_less", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BetResultHeaderView.validate()
      try _BetSectionHeaderView.validate()
      try _FaqView.validate()
      try _NoActiveBetsCell.validate()
    }

    struct _BetResultHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BetResultHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BetResultHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BetResultHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow_top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_top' is used in nib 'BetResultHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bets", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bets' is used in nib 'BetResultHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "done", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'done' is used in nib 'BetResultHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "blue_gray_300", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue_gray_300' is used in nib 'BetResultHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue_gray_500", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue_gray_500' is used in nib 'BetResultHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title_color' is used in nib 'BetResultHeaderView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _BetSectionHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BetSectionHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BetSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BetSectionHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "done", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'done' is used in nib 'BetSectionHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "blue_gray_300", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue_gray_300' is used in nib 'BetSectionHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text' is used in nib 'BetSectionHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "won", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'won' is used in nib 'BetSectionHeaderView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _BetsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BetsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BetsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BetsCell
      }

      fileprivate init() {}
    }

    struct _BetsCellView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BetsCellView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BetsCellView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BetsCellView
      }

      fileprivate init() {}
    }

    struct _FaqView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FaqView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FaqView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FaqView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "up_small_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'up_small_arrow' is used in nib 'FaqView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background_main_light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background_main_light' is used in nib 'FaqView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "green_blue_start", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'green_blue_start' is used in nib 'FaqView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadow' is used in nib 'FaqView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text_theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_theme' is used in nib 'FaqView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title_color' is used in nib 'FaqView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "toolbarItem", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'toolbarItem' is used in nib 'FaqView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NoActiveBetsCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NoActiveBetsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NoActiveBetsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoActiveBetsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ball_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ball_blue' is used in nib 'NoActiveBetsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "selected_toolbar_item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'selected_toolbar_item' is used in nib 'NoActiveBetsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text_theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_theme' is used in nib 'NoActiveBetsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "toolbarItem", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'toolbarItem' is used in nib 'NoActiveBetsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TeamView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TeamView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeamView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamView
      }

      fileprivate init() {}
    }

    struct _TeamsRowView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TeamsRowView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeamsRowView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamsRowView
      }

      fileprivate init() {}
    }

    struct _TeamsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TeamsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeamsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamsView
      }

      fileprivate init() {}
    }

    struct _TeamsViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TeamsViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TeamsViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamsViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try betDetailsVController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try historyVController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signInVController.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct betDetailsVController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let betDetailsVController = StoryboardViewControllerResource<BetDetailsVController>(identifier: "BetDetailsVController")
      let bundle = R.hostingBundle
      let name = "BetDetailsVController"

      func betDetailsVController(_: Void = ()) -> BetDetailsVController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: betDetailsVController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "blue_gray_400", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue_gray_400' is used in storyboard 'BetDetailsVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray' is used in storyboard 'BetDetailsVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "green_blue_end", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'green_blue_end' is used in storyboard 'BetDetailsVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadow' is used in storyboard 'BetDetailsVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text' is used in storyboard 'BetDetailsVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "won", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'won' is used in storyboard 'BetDetailsVController', but couldn't be loaded.") }
        }
        if _R.storyboard.betDetailsVController().betDetailsVController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'betDetailsVController' could not be loaded from storyboard 'BetDetailsVController' as 'BetDetailsVController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct historyVController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let historyVController = StoryboardViewControllerResource<HistoryVController>(identifier: "HistoryVController")
      let name = "HistoryVController"

      func historyVController(_: Void = ()) -> HistoryVController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: historyVController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_back' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "done", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'done' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background_light_theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background_light_theme' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background_main_light", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background_main_light' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "bet_group_start", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bet_group_start' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "green_blue_end", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'green_blue_end' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "return", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'return' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadow' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_black' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text_theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_theme' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title_color' is used in storyboard 'HistoryVController', but couldn't be loaded.") }
        }
        if _R.storyboard.historyVController().historyVController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'historyVController' could not be loaded from storyboard 'HistoryVController' as 'HistoryVController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signInVController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignInVController"
      let signInVController = StoryboardViewControllerResource<SignInVController>(identifier: "SignInVController")

      func signInVController(_: Void = ()) -> SignInVController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInVController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "account_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'account_circle' is used in storyboard 'SignInVController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google' is used in storyboard 'SignInVController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "telegram", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'telegram' is used in storyboard 'SignInVController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background_main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background_main' is used in storyboard 'SignInVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "bet_group_end", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bet_group_end' is used in storyboard 'SignInVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "bet_group_header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bet_group_header' is used in storyboard 'SignInVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "blue_gray_400", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'blue_gray_400' is used in storyboard 'SignInVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "green_blue_start", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'green_blue_start' is used in storyboard 'SignInVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "selected_toolbar_item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'selected_toolbar_item' is used in storyboard 'SignInVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shadow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shadow' is used in storyboard 'SignInVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_black' is used in storyboard 'SignInVController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "title_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'title_color' is used in storyboard 'SignInVController', but couldn't be loaded.") }
        }
        if _R.storyboard.signInVController().signInVController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInVController' could not be loaded from storyboard 'SignInVController' as 'SignInVController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
